package MC
public
	
	with SW;
	with UAV;
	with UAS;
	with TB_SYS;
	
	with Base_Types;

  data MISSING_TYPE
  end MISSING_TYPE;
  
  data implementation MISSING_TYPE.Impl
  	subcomponents
  		MISSING: data Base_Types::Integer_32;
  end MISSING_TYPE.Impl;
  
	device Radio
		features
			MCA: requires bus access MC_Bus;
			RFA: requires bus access UAS::RF;
			recv_map_in: in event data port MISSING_TYPE.Impl;
			recv_map_out: out event data port SW::Command.Impl;
			send_status_in: in event data port SW::Coordinate.Impl;
			send_status_out: out event data port MISSING_TYPE.Impl;
		flows
			comm_map : flow path recv_map_in -> recv_map_out;
			comm_status : flow path send_status_in -> send_status_out;
		annex EMV2{**
			use types UAS_Errors;
			error propagations
				recv_map_in : in propagation {wellformed_authenticated, wellformed_unauthenticated, 
					not_wellformed_authenticated, not_wellformed_unauthenticated
				};
				recv_map_out : out propagation {wellformed_authenticated, wellformed_unauthenticated, 
					not_wellformed_authenticated, not_wellformed_unauthenticated
				};
			flows
				wellformed_authenticated : error path recv_map_in{wellformed_authenticated} -> recv_map_out{wellformed_authenticated};
				wellformed_unauthenticated : error path recv_map_in{wellformed_unauthenticated} -> recv_map_out{wellformed_unauthenticated};
				not_wellformed_authenticated : error path recv_map_in{not_wellformed_authenticated} -> recv_map_out{not_wellformed_authenticated};
				not_wellformed_unauthenticated : error path recv_map_in{not_wellformed_unauthenticated} -> recv_map_out{not_wellformed_unauthenticated};
				
			end propagations;
		**};	
	end Radio;

	device UART
		features
			MCA: requires bus access MC_Bus;
			UARTA: requires bus access UAV::Serial;
			waypoint_in: in event data port SW::MissionWindow.Impl;
			waypoint_out: out event data port MISSING_TYPE.Impl;
			position_status_in: in event data port MISSING_TYPE.Impl;
			position_status_out: out event data port SW::Coordinate.Impl;
		flows
			comm_waypoint : flow path waypoint_in -> waypoint_out;
			comm_status : flow path position_status_in -> position_status_out;
		annex EMV2{**
			use types UAS_Errors;
			error propagations
				waypoint_in : in propagation {wellformed_authenticated};
				waypoint_out : out propagation {wellformed_authenticated};
			flows
				authenticated_wellformed : error path waypoint_in{wellformed_authenticated} -> 
				waypoint_out{wellformed_authenticated};
				
			end propagations;
		**};	
	end UART;

	processor MC_Proc
		features
			MCA: requires bus access MC_Bus;			
	end MC_Proc;
	
	 processor implementation MC_Proc.Impl
    properties
      TB_SYS::OS => CAmkES;
      TB_SYS::HW => TK1;
      TB_SYS::Add_Dummy_Arg_To_Void_Fns => True;      
  end MC_Proc.Impl;
  
	memory MC_Mem
		features
			MCA: requires bus access MC_Bus;		
	end MC_Mem;
	
	bus MC_Bus
	end MC_Bus;

	system MissionComputer
		features
			recv_map: in event data port MISSING_TYPE.Impl;
			position_status: in event data port MISSING_TYPE.Impl;
			waypoint: out event data port MISSING_TYPE.Impl;
			send_status: out event data port MISSING_TYPE.Impl;
			UARTA: requires bus access UAV::Serial;
			RFA: requires bus access UAS::RF;
		flows 
			compute_waypoint: flow path recv_map -> waypoint;
			compute_status: flow path position_status -> send_status;
			
		annex EMV2{**
			use types UAS_Errors;
			error propagations
				recv_map : in propagation {wellformed_authenticated, 
					wellformed_unauthenticated, not_wellformed_authenticated, not_wellformed_unauthenticated
				};
				waypoint : out propagation {wellformed_authenticated};
			flows
				wellformed_authenticated : error path recv_map{wellformed_authenticated} -> waypoint{wellformed_authenticated};
				unauthenticated_map : error sink recv_map{not_wellformed_unauthenticated, wellformed_unauthenticated};
				not_wellformed_map : error sink recv_map{not_wellformed_unauthenticated, not_wellformed_authenticated};
				
			end propagations;
		**};		
	end MissionComputer;
	
	system implementation MissionComputer.Impl
		
		subcomponents
			RADIO_HW: device Radio;
			UART_HW: device UART;
			PROC_HW: processor MC_Proc.Impl;
			MEM_HW: memory MC_Mem;
			BUS_HW: bus MC_Bus;
			PROC_SW: process SW::MC_SW.Impl;
			
		connections
			bac1: bus access RADIO_HW.MCA <-> BUS_HW;
			bac2: bus access UART_HW.MCA <-> BUS_HW;
			bac3: bus access PROC_HW.MCA <-> BUS_HW;
			bac4: bus access MEM_HW.MCA <-> BUS_HW;
			bac5: bus access RFA <-> RADIO_HW.RFA;
			bac6: bus access UART_HW.UARTA <-> UARTA;
			c1: port recv_map -> RADIO_HW.recv_map_in;
			c2: port RADIO_HW.recv_map_out -> PROC_SW.recv_map;
			c3: port PROC_SW.send_status -> RADIO_HW.send_status_in;
			c4: port RADIO_HW.send_status_out -> send_status;
			c5: port PROC_SW.waypoint -> UART_HW.waypoint_in;
			c6: port UART_HW.waypoint_out -> waypoint;
			c7: port position_status -> UART_HW.position_status_in;
			c8: port UART_HW.position_status_out -> PROC_SW.position_status;
		
		properties
			Actual_Processor_Binding => (reference (PROC_HW)) applies to PROC_SW;
			Actual_Memory_Binding => (reference (MEM_HW)) applies to PROC_SW;
			Actual_Connection_Binding => (reference (BUS_HW)) applies to c2, c3, c5, c8;
		
	end MissionComputer.Impl;
	
end MC;