package SW
public

	with Base_Types;
	with TB_SYS;

  -- This is the structure to hold the lat/long/alt values of a coordinate
  data Coordinate 
  end Coordinate;

	data implementation Coordinate.Impl
		subcomponents
			lat: data Base_Types::Integer_32;
			longitude: data Base_Types::Integer_32; 
			alt: data Base_Types::Integer_32;
	end Coordinate.Impl;
	
	
	-- The Map is a structure that contains a list of coordinates that encircle a
	-- region.  
	-- In this implementation, we fix the size of the map to 4 waypoints
	data Map 
	end Map;
	
	data implementation Map.Impl
		subcomponents
			wp1: data Coordinate.Impl;
			wp2: data Coordinate.Impl;
			wp3: data Coordinate.Impl;
			wp4: data Coordinate.Impl;
	end Map.Impl;
	
	
	-- The Flight Pattern is an enumeration that defines how the UAV will fly through the
	-- sensing region to conduct surveillance.
	data FlightPattern
	end FlightPattern;
	
	data implementation FlightPattern.Impl
		subcomponents
			pattern: data Base_Types::Integer_32;
	end FlightPattern.Impl;
	
	
	-- The Command structure contains data that the Ground Station passes to the UAV.
	-- It contains a Map, Flight Pattern and Authentication bit.
	data Command
	end Command;
		
	data implementation Command.Impl
		subcomponents
			Map: data Map.Impl;
			Pattern: data FlightPattern.Impl;
			HMAC: data Base_Types::Boolean;
	end Command.Impl;
	
	
	-- The Mission is a list of waypoints that is generated by the Flight Planner based on a
	-- Map and Flight Pattern.
	-- For this implementation, we fix the size of the Mission to 10 waypoints.
	data Mission
	end Mission;
	
	data implementation Mission.Impl
		subcomponents
			wp1: data Coordinate.Impl;
			wp2: data Coordinate.Impl;
			wp3: data Coordinate.Impl;
			wp4: data Coordinate.Impl;
			wp5: data Coordinate.Impl;
			wp6: data Coordinate.Impl;
			wp7: data Coordinate.Impl;
			wp8: data Coordinate.Impl;
			wp9: data Coordinate.Impl;
			wp10: data Coordinate.Impl;
	end Mission.Impl;
	
	
	-- The Mission Window is a list of waypoints that the Waypoint Manager assembles from
	-- the Mission.
	-- For this implementation, we fix the size of the Mission Window to 4 waypoints.
	-- The crc value is an abstraction, which, if true, tells us that the data has not
	-- been corrupted.
	data MissionWindow
	end MissionWindow;
	
	data implementation MissionWindow.Impl
		subcomponents
			wp1: data Coordinate.Impl;
			wp2: data Coordinate.Impl;
			wp3: data Coordinate.Impl;
			wp4: data Coordinate.Impl;
			crc: data Base_Types::Boolean;
	end MissionWindow.Impl;
	
	
	thread RadioDriver
		features
			recv_map_in: in event data port Command.Impl;
			send_status_out: out event data port Coordinate.Impl;
			send_status_in: in event data port Coordinate.Impl {
				TB_SYS::Compute_Entrypoint_Source_Text => ("radio_driver_send_status_in_event_handler");
			};
			recv_map_out: out event data port Command.Impl;
    
    properties
      Dispatch_Protocol => Sporadic;
      Priority => 200;
      Stack_Size => 1024 Bytes;
      Compute_Execution_Time => 10 us .. 100 us;
      Period => 1 ms;
      Initialize_Entrypoint_Source_Text => "radio_driver_component_init";
      Source_Text => ("aux_c/radiodriver.c");
            			
	end RadioDriver;
	
	
  thread implementation RadioDriver.Impl
    
  end RadioDriver.Impl;	
	
	
	thread FlightPlanner
		features
			flight_plan: out data port Mission.Impl;
			recv_map: in event data port Command.Impl {
        TB_SYS::Compute_Entrypoint_Source_Text => 
          ("recv_map_handler");
      };
			position_status: in event data port Coordinate.Impl {
        TB_SYS::Compute_Entrypoint_Source_Text => 
          ("position_status_handler");
      };
    
    properties
      Dispatch_Protocol => Sporadic;
      Priority => 200;
      Stack_Size => 1024 Bytes;
      Compute_Execution_Time => 10 us .. 100 us;
      Period => 1 ms;
      Source_Text => ("aux_c/flight_planner.c");

	end FlightPlanner;
  
  
  thread implementation FlightPlanner.Impl
    
  end FlightPlanner.Impl;
  	

	thread WaypointManager
		features
			flight_plan: in data port Mission.Impl;
			waypoint: out event data port MissionWindow.Impl;
			position_status: in event data port Coordinate.Impl;
    properties
      Dispatch_Protocol => Sporadic;
      Priority => 200;
      Stack_Size => 1024 Bytes;
      Compute_Execution_Time => 10 us .. 100 us;
      Period => 1 ms;

	end WaypointManager;
	
	
	thread implementation WaypointManager.Impl
		
	end WaypointManager.Impl;
	
	
	thread UARTDriver
		features
			position_status_in: in event data port Coordinate.Impl;
			waypoint_out: out event data port MissionWindow.Impl;
			position_status_out: out event data port Coordinate.Impl;
			waypoint_in: in event data port MissionWindow.Impl;
			
		properties
      Dispatch_Protocol => Sporadic;
      Priority => 200;
      Stack_Size => 1024 Bytes;
      Compute_Execution_Time => 10 us .. 100 us;
      Period => 1 ms; 			

	end UARTDriver;
	
	
	thread implementation UARTDriver.Impl
		
	end UARTDriver.Impl;
	

	process MC_SW
		features
			recv_map: in event data port Command.Impl;
			send_status: out event data port Coordinate.Impl;
			waypoint: out event data port MissionWindow.Impl;
			position_status: in event data port Coordinate.Impl;
	
	end MC_SW;


	process implementation MC_SW.Impl
		subcomponents
			RADIO: thread RadioDriver.Impl;
			FPLN: thread FlightPlanner.Impl;
			WPM: thread WaypointManager.Impl;
			UART: thread UARTDriver.Impl;
		connections
			c1: port recv_map -> RADIO.recv_map_in;
			c2: port RADIO.send_status_out -> send_status;
			c3: port RADIO.recv_map_out -> FPLN.recv_map;
			c5: port FPLN.flight_plan -> WPM.flight_plan;
			c6: port WPM.waypoint -> UART.waypoint_in;
			c7: port UART.position_status_out -> WPM.position_status;
			c8: port UART.position_status_out -> FPLN.position_status;
			c9: port UART.position_status_out -> RADIO.send_status_in;
			c10: port UART.waypoint_out -> waypoint;
			c11: port position_status -> UART.position_status_in;
			
	end MC_SW.Impl;
	
	
end SW;