/**************************************************************************
  Copyright (c) 2013-2016 Rockwell Collins and the University of
  Minnesota. Developed with the sponsorship of the Defense Advanced
  Research Projects Agency (DARPA).

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this data, including any software or models
  in source or binary form, as well as any drawings,
  specifications, and documentation (collectively "the Data"), to
  deal in the Data without restriction, including without
  limitation the rights to use, copy, modify, merge, publish,
  distribute, sublicense, and/or sell copies of the Data, and to
  permit persons to whom the Data is furnished to do so, subject to
  the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Data.

  THE DATA IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
  OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS, SPONSORS,
  DEVELOPERS, CONTRIBUTORS, OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
  CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE DATA OR THE USE OR OTHER DEALINGS IN THE
  DATA.
 **************************************************************************/

/**************************************************************************

  ***AUTOGENERATED CODE: DO NOT MODIFY***

This file contains the main CAmkES assembly for the
AADL system instance rooted at proc.

 **************************************************************************/

import <std_connector.camkes>;

#include <autoconf.h>
#define TB_MONITOR_READ_ACCESS 111
#define TB_MONITOR_WRITE_ACCESS 222

import "components/dispatch_periodic/dispatch_periodic.camkes";
import <Timer.idl4>;
import <TimeServerKZM/TimeServer.camkes>;

import "components/sender/sender.camkes";
import "components/receiver/receiver.camkes";
import "components/tb_Monitors/tb_receiver_dataPort_Monitor/tb_receiver_dataPort_Monitor.camkes";
import "components/tb_Monitors/tb_receiver_eventDataPort_Monitor/tb_receiver_eventDataPort_Monitor.camkes";




// 12/12 MWW modified for CaMKes-next
connector seL4RPCCallDataport {
    from Procedure template "seL4RPCCallDataport-from.template.c";
    to Procedure template "seL4RPCCallDataport-to.template.c";
}

assembly {
    composition {
        component dispatch_periodic dispatch_periodic_inst;

        component TimeServerKZM time_server;
        // Component instances for all AADL-defined threads

        component sender sender_inst;
        component receiver receiver_inst;



        // Port declarations for active threads

        connection seL4TimeServer tb_sender_periodic_dispatcher_timer(from sender_inst.tb_timer, to time_server.the_timer);
        connection seL4Notification tb_sender_periodic_dispatcher_echo_int(from dispatch_periodic_inst.sender_periodic_dispatcher, to sender_inst.tb_timer_complete);

        connection seL4Notification conn1 (from sender_inst.eventPort, to receiver_inst.eventPort);

        component tb_receiver_dataPort_Monitor tb_receiver_dataport_monitor;

        component tb_receiver_eventDataPort_Monitor tb_receiver_eventdataport_monitor;




        // Port connections for active threads

        connection seL4RPCCall conn2 (from sender_inst.tb_dataPort0, to tb_receiver_dataport_monitor.mon);

        connection seL4RPCCall conn3 (from sender_inst.tb_eventDataPort0, to tb_receiver_eventdataport_monitor.mon);

        connection seL4RPCCall conn4 (from receiver_inst.tb_dataPort, to tb_receiver_dataport_monitor.mon);
        connection seL4Notification conn5 (from tb_receiver_dataport_monitor.monsig, to receiver_inst.tb_dataPort_notification);

        connection seL4RPCCall conn6 (from receiver_inst.tb_eventDataPort, to tb_receiver_eventdataport_monitor.mon);
        connection seL4Notification conn7 (from tb_receiver_eventdataport_monitor.monsig, to receiver_inst.tb_eventDataPort_notification);



        // Direct RPC connections

        connection seL4RPCCall conn8 (from sender_inst.add_subtract, to receiver_inst.add_subtract);




        connection seL4TimeServer periodic_dispatch_timer(from dispatch_periodic_inst.timer, to time_server.the_timer);
        connection seL4GlobalAsynchCallback echo_int(from time_server.timer_notification, to dispatch_periodic_inst.timer_complete);
    }

    configuration {
        dispatch_periodic_inst.timer_attributes = 10;
        dispatch_periodic_inst.timer_global_endpoint = "periodic_dispatcher_timer";
        dispatch_periodic_inst.timer_complete_global_endpoint = "periodic_dispatcher_timer";
        dispatch_periodic_inst.priority = 201;



        // Component port configuration declarations

        sender_inst.tb_dataPort0_attributes = TB_MONITOR_WRITE_ACCESS;

        sender_inst.tb_eventDataPort0_attributes = TB_MONITOR_WRITE_ACCESS;

        tb_receiver_dataport_monitor.priority = 230;
        receiver_inst.tb_dataPort_attributes = TB_MONITOR_READ_ACCESS;

        tb_receiver_eventdataport_monitor.priority = 230;
        receiver_inst.tb_eventDataPort_attributes = TB_MONITOR_READ_ACCESS;

        // receiver_inst.eventPort = "receiver_eventPort";
        // receiver_inst.eventPort_global_endpoint = "receiver_eventPort";



        sender_inst.priority = 10;
        receiver_inst.priority = 10;

        sender_inst._control_stack_size = 256;
        receiver_inst._control_stack_size = 1024;

        sender_inst.tb_timer_attributes = 11;
        sender_inst.tb_timer_global_endpoint = "sender_tb_timer";


        //ADDITIONAL_CONFIGS
    }
}


