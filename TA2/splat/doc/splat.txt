%<a href="splat.pdf" target="_blank">Semantic Properties \
for \
Language and Automata Theory (SPLAT)</a>
% Konrad Slind, Trusted Systems Group, Collins Aerospace
% February 7, 2019

\newcommand{\imp}{\;\Rightarrow\;}
\newcommand{\valid}{\mathsf{Valid}}
\newcommand{\dom}{\mathsf{Dom}}
\newcommand{\cod}{\mathsf{Cod}}
\newcommand{\con}{\mathsf{CON}}
\newcommand{\cons}[2]{{#1}\, :: \,{#2}}
\newcommand{\konst}[1]{\mathsf{#1}}
\newcommand{\set}[1]{\{ {#1} \}}
\newcommand{\Lang}[1]{{\mathcal L}({#1})}
\newcommand{\condA}[2]{\konst{if}\; {#1} \;\konst{then}\; {#2}}
\newcommand{\condB}[3]{\konst{if}\; {#1} \;\konst{then}\; {#2} \;\konst{else}\; {#3}}
\newcommand{\lsb}{\mathbf{\small{[}}}
\newcommand{\rsb}{\mathbf{\small{]}}}
\newcommand{\ltb}{\mathbf{\small{<}}}
\newcommand{\gtb}{\mathbf{\small{>}}}
\newcommand{\Env}{\mathcal{E}}
\newcommand{\sem}[1]{[ \! [ {#1} ] \! ]}
\newcommand{\divk}[1]{{#1}\;\konst{div}\; 256}
\newcommand{\modk}[1]{{#1}\;\konst{mod}\; 256}
\newcommand{\wrap}[1]{#1}
\newcommand{\bto}[1]{\mathbf{B}^{#1}}

**Draft Status**. This document is a work in progress.

Introduction
============

**SPLAT** (Semantic Properties for Language and Automata Theory)
designates the application of language theory---which is based on
*strings*---to help enforce, formulate and prove properties over a
collection of other useful types, such as numbers, enumerations,
records, and arrays. In particular, our focus is on applying tools and
concepts from language theory to help automate the specification,
creation, and verification of practical programs. As one example of
this approach, we employ regular expressions to model and implement
arithmetic constraints. This has been applied to the task of
automating the generation and proof of correctness of encoders and
decoders for network message formats.

Language Theory and Encoding
-----------------------------

The basic notions of theoretical computer science are often formulated
in terms of strings of symbols drawn from an alphabet: automata,
grammars, and Turing machines all use strings as their main data
structure. On the practical side, the theory of grammars and regular
expressions provides a solid basis for tools such as lexer and parser
generators. In order to bridge the gap between strings and the rich
universe of data structures used in computer science, *encoding* and
*decoding* is employed. For example, showing the existence of a
universal Turing machine requires an encoding/decoding scheme for the
strings (Turing machines) being taken as arguments. In fact, the
activity of packing data into a string format and then unpacking it is
pervasive, not only in theoretical computer science, but also in
practical contexts, *e.g.* data compression, data encryption, sending
structured data over a network, *etc*.

Regular expressions
---------------------

(We are building on previously reported [safecomp2016] work in HOL4
providing a theory of regular expressions and a verified translator of
$\konst{regexp}$s to table-driven DFAs (deterministic finite state
automata). The formalization is available in the HOL4 distribution.)

Let $\mathbb{S}$ be the set of finite strings over an alphabet
$\Sigma$. Throughout, we assume $\Sigma$ is the 256 ASCII
characters. This supports the use of $\konst{char}\;\konst{list}$ as a
representation for $\mathbb{S}$, allowing the use of some list
operations on elements of $\mathbb{S}$. A regular expression over the
alphabet designates a set of strings $\mathbb{S} \to \konst{bool}$. We
use the following datatype to represent regular expressions:

$$
\begin{array}{rcl}
\konst{regexp} & ::= & \konst{Chset}\; \konst{w64}\;\konst{w64}\;\konst{w64}\;\konst{w64} \\
     & \mid & \konst{Cat}\; \konst{regexp}\; \konst{regexp} \\
     & \mid & \konst{Or} \; \konst{regexp}\;\konst{list} \\
     & \mid & \konst{Star}\; \konst{regexp} \\
     & \mid & \konst{Neg}\;  \konst{regexp} 
\end{array}
$$

$\konst{Chset}$
represents a *charset*: a 256-wide bitset capable of representing any
subset of $\Sigma$. We have chosen to represent bitsets with
four-tuples of 64-bit numbers. $\konst{Cat}$ is the concatenation
operator, $\konst{Star}$ is Kleene star, the $\konst{Or}$ operator is
an *n*-ary disjunction, and $\konst{Neg}$ is a complement
operator. 

The semantics of regular expressions inteprets a $\konst{regexp}$ as a
set of strings:
$$
\begin{array}{rcl}
\Lang{\konst{Chset}\; \mathit{cset}} & = & \set{[c] \mid c \in \mathit{cset}} \\
\Lang{\konst{Cat}\; r_1\;r_2}  & = & \Lang{r_1} \cdot \Lang{r_2} \\
\Lang{\konst{Or} \; [r_1,\ldots,r_n]} & = & \Lang{r_1} \cup \cdots \cup \Lang{r_n}\\
\Lang{\konst{Star}\;r} & = & (\Lang{r})^{*} \\
\Lang{\konst{Neg}\; r} & = & \konst{COMPL}(\Lang{r})
\end{array}
$$
where concatenation ($-\cdot-$), Kleene star $(-)^{*}$, and set
complement $\konst{COMPL}(-)$ are pre-defined operators in a theory
including sets and formal languages. It is also useful to have a
function $\konst{charset\_of} : \mathbb{N}\;\konst{list} \to
\mathit{cset}$ that creates a charset given a list of numbers less
than 256.

Some common notation and derived operations in this representation:
$$
\begin{array}{rcl}
r_1 + \cdots + r_n & = & \konst{Or}[r_1,\ldots,r_n] \\
r_1 r_2 & = & \konst{Cat}\;r_1 \; r_2 \\
{[m-n]} & = & \konst{Chset}(\konst{charset\_of} \; [m, m+1, \ldots, n-1,n]) \quad (\text{where}\; 0 \leq m \leq n \leq 255) \\
{[m]} & = & [m-m] \\
\bullet & = & [0-255] \\
\emptyset & = & \konst{Chset}(\konst{charset\_of} \; []) \\
\varepsilon & = & \konst{Star}(\emptyset) \\
\konst{And}\;r_1\;r_2 & = & \konst{Neg}(\konst{Or}[\konst{Neg}\; r_1,  \konst{Neg}\; r_2] \\
\konst{Diff}\;r_1\;r_2 & = & \konst{And}\;r_1\; (\konst{Neg}\;r_2)
\end{array}
$$
The "dot" charset ($\bullet$) is the full charset that matches every
one-element string; $\emptyset$ matches no string; and $\varepsilon$
is the empty string.

Properties meet Encodings
=========================

Now we come to the main focus of this paper: statements of the form
$$
  x \in P \iff \konst{encode}\;x \in \Lang{\konst{regexp\_of}\; P}
$$
where $P:\tau\to\konst{bool}$ represents a predicate on type $\tau$,
$\konst{encode} : \tau \to \mathbb{S}$ maps items of type $\tau$ to
strings, and $\konst{regexp\_of}\;P$ is an abstract operation that
translates $P$ into an "equivalent" regular expression. Rephrasing the statement as:
$$
  P: \tau\to\konst{bool} = \Lang{\konst{regexp\_of}\; P} \circ \konst{encode}
$$
more directly expresses the **SPLAT** setting, namely, "what happens when we
stick an encoder in front of some formal language machinery?"  The
main practical benefit for us comes from being able to compile the
$\konst{regexp\_of}\; P$ expression to a DFA, thus giving an
efficient, table-driven, implementation of $P$.

**Remark.** The $\konst{regexp\_of}$ operation depends on context. In
some cases, *e.g.* intervals as below, there is a syntax-driven
algorithm; in some cases it is a matter of human insight. Further, whether
$\konst{regexp\_of}$ is *shallowly* or *deeply* embedded is an
important consideration, one that we gloss over for now.

**Remark.** $\konst{regexp\_of}$ is limited to predicates expressible
  with regular languages. Moving up to grammars, such as context-free
  grammars, gives more expressive power, and would require a
  $\konst{grammar\_of}$ operator (along with a modified definition of
  $\Lang{-}$) in the statement, *i.e.*:
$$ 
x \in P \iff \konst{encode}\;x \in \Lang{\konst{grammar\_of}\; P}
$$

**Question.** To what extent can formula constructions (conjunction,
disjunction, implication, *etc*.) over the predicates be paralleled by
regular expression constructions on the right? We haven't yet pursued
this.

### Example

Consider the "even-number" predicate $\konst{even} :
\mathbb{N}\to\konst{bool}$. Let $\mathit{cset} =
\konst{charset\_of}\;[0,2,4, \ldots, 254]$ be the character set
corresponding to the non-negative even numbers less than 256. Assuming
$$
\konst{regexp\_of}\; \konst{even} = 
\konst{Cat}\; (\konst{Chset}\;\mathit{cset})\;(\konst{Star}\;\bullet),
$$ 
(the encoding is in LSB format), we construct the formula
$$
\konst{even}(n) \iff \konst{encode}(n) \in \Lang{\konst{Cat}\;
(\konst{Chset}\;\mathit{cset})\; (\konst{Star}\;\bullet)}
$$
This can be proven by reasoning with the regular language semantics, plus
the encodings defined below. The regular expression compiles to a
3-state DFA.


Encodings for common types
==========================

We now discuss a collection of common types and their encoding and
decoding functions. Our approach is to reduce to a base
encoder/decoder for natural numbers.

- **Natural numbers.** First, define the map $\konst{n2l} : \mathbb{N}\to
\mathbb{N}\;\konst{list}$ from a number to its little-endian base-256
representation, and the inverse.
$$
\begin{array}{lcl}
\konst{n2l}(n) & = &
   \condB{n=0}{[]}{\cons{(\modk{n})}{\konst{n2l}\; (\divk{n})}} \\
\konst{l2n}\;[] & = & 0 \\
\konst{l2n}\;(\cons{h}{t}) & = & h + 256 * \konst{l2n}(t) \\
\end{array}
$$
Then we have $\vdash \forall n.\; \konst{l2n} (\konst{n2l}\; n) = n$.
Big-endian versions are similarly defined. Another issue is *padding*
to a specified width. Using a builtin operator, $\konst{pad\_right}$,
we can define a basic number encoder $\konst{enc} : \mathbb{N} \to
\mathbb{N} \to \mathbb{S}$ and the corresponding decoder $\konst{dec}
: \mathbb{S}\to\mathbb{N}$:
$$
\begin{array}{rcl}
\konst{layout}\; n \; \mathit{width} & = & 
   \konst{pad\_right}\; 0\; \mathit{width}\; (\konst{n2l}\; n) \\
\konst{enc}\; w\; n & = & 
\konst{map}\; \konst{chr}\; (\konst{layout}\; n\; w) \\
\konst{dec}\; s & = & \konst{l2n}\; (\konst{map}\; \konst{ord}\; s)
\end{array}
$$
Then we have $\vdash \forall n\;w.\; \konst{dec} (\konst{enc}\; w\; n) = n$.

- **Integers.** Encoding of integers can be expressed by
adding an encoding to map from integers to natural numbers.  Twos
complement representation is most commonly used. At the word level,
the twos complement operation on negative integers is "flip each bit
and add 1". But it is expressible at the level of integers and natural
numbers since an $(n-1)$-bit integer added to its twos complement equals
$2^n$. Thus
$$
\konst{i2n}_N : \set{i \in \mathbb{Z} \mid -2^{N-1} \leq i < 2^{N-1}} 
             \to \set{k \in \mathbb{N} \mid 0 \leq k < 2^{N}}
$$
specifies a map from an integer to its corresponding natural number defined by
$$
 \konst{i2n}_N (i) = \condB{0 \leq i < 2^{N-1}}
                           {\konst{Nat}(i)}
                           {2^{N} - \konst{Nat}(\konst{Abs}(i))}
$$
($\konst{Nat}$ maps from non-negative integers to $\mathbb{N}$;
$\konst{Int}$ maps from $\mathbb{N}$ to non-negative integers; and
$\konst{Abs}$ is an absolute value operator that maps integers to non-negative integers.) 
The inverse function is
$$
\konst{n2i}_N (n) = \condB{n < 2 ^{N-1}}{\konst{Int}(n)}{-\konst{Int}(2^N - n)}
$$
An encoder and decoder for integers is then directly obtained:
$$
\begin{array}{l}
\konst{enci}\; w\; i = \konst{enc}\; w\; (\konst{i2n}\; (8w)\; i) \\
\konst{deci}\;w\; s = \konst{n2i}\; (8w)\; (\konst{dec}\; s)
\end{array}
$$
which enjoy the inversion property, provided integer *i* is representable:
$$
\vdash 0 < w \land -\konst{Int}(2^{8w - 1}) \leq i \land i < \konst{Int}(2^{8w - 1})
       \imp \konst{deci}\; w\; (\konst{enci}\; w\; i) = i
$$
**Note.** $\konst{enci}(i)$ renders $i$ into twos complement
representation, thus supporting the standard bit format for signed
integers.

- **Enumerations.** An enumerated type can be encoded by providing a map
from elements of the type to $\mathbb{N}$. For example the type of booleans give rise to maps
$$
\begin{array}{ll}
\konst{num\_of\_bool} \; \konst{false} = 0 & \konst{num\_of\_bool} \; \konst{true} = 1  \\
\konst{bool\_of\_num} \; 0 = \konst{false} & \konst{bool\_of\_num} \; 1 = \konst{true}  \\
\end{array}
$$
which gives the basis for the encoder and decoder:
$$
\begin{array}{l} 
\konst{enc\_bool}\; b = \konst{enc}\; 1\; (\konst{num\_of\_bool}\; b) \\
 \konst{dec\_bool}\; s = \konst{bool\_of\_num}\; (\konst{dec}\; s)
\end{array}
$$
Trivially, we have $\vdash \forall b.\; \konst{dec\_bool} (\konst{enc\_bool}\; b) = b$.

- **Records.** Sets of records of a given type $\konst{recd}$ can be encoded
by fixing an order on the fields and concatenating their encodings. Thus given record type
$$
   \konst{recd} = \{ f_1 : \tau_1; \ldots ; f_n : \tau_n\}
$$
and encoders for $\tau_1,\ldots, \tau_n$, we can define
$$
   \konst{encode\_recd}(x) = \konst{encode}_{\tau_1}(x.f_1) \cdots \konst{encode}_{\tau_n}(x.f_n)
$$

- **Arrays.** A $\tau\;\konst{array}$ of size $K$ can be encoded by
 concatenating the result of applying the encoder for $\tau$ $K$
 times. While this is conceptually simple, the resulting regular expressions
 for large or even medium size arrays will probably be too large for our tools.

- **Fixed- and variable-width encodings.** So far we have dealt solely
    with data of fixed size. Techniques for encoding variable-width
    data, such as lists or trees, and for handling polymorphic types,
    have been explored in a variety of settings. For theorem proving,
    focusing on polytypism, see "Applications of polytypism in theorem
    proving" (Slind and Hurd, 2003) and similar work in other proof systems.

Interval Properties and Regexps
================================

Now that we have surveyed how to encode data, we can move to the
encoding of properties by regular expressions. The $\konst{even}(n)$
predicate from our initial example was created in an *ad hoc* manner,
but we seek some properties that can be algorithmically translated to
regexps. One of the most useful for us so far has been *intervals*.

An interval $[\mathit{lo} ,\mathit{hi}]$ is defined to be $\set{n \in \mathbb{N} \mid
\mathit{lo} \leq n \leq \mathit{hi}}$; another way of expressing it is
as a property $\lambda n. \mathit{lo} \leq n \land n \leq \mathit{hi}$.
An interval is mapped to a regular expression by an algorithm
$\konst{regexp\_of}\;[\mathit{lo},\mathit{hi}]$ that proceeds in
parallel on the base-256 representations given by $\konst{reverse}
\circ \konst{n2l}$, *i.e*, following the MSB (most significant byte
leftmost) format. However, the algorithm on the representations is
quite detailed, and better insight is obtained by describing the
transformations at the level of numbers. Let $\mathbf{B} = 256$ so
that
$$
\begin{array}{ll}
\mathit{lo} = p \bto{a} + r_1 & ; \quad r_1 < \bto{a} \\
\mathit{hi} = q \bto{b} + r_2 & ; \quad r_2 < \bto{b}
\end{array}
$$
The algorithm breaks large intervals down to unions of sub-intervals
in such a way that regular expressions can be easily generated from
the subintervals. Proceeding lexicographically on exponents, then
factors, then remainders, there are essentially four ways for
$\mathit{lo} \leq \mathit{hi}$ to hold:

1. $a < b$. The span between the exponents is split into one
interval per intermediate exponent
$$
 [\mathit{lo}, \bto{a + 1} -1] \cup 
\underbrace{[\bto{a + 1}, \bto{a + 2} -1] \cup \cdots \cup [\bto{b - 1}, \bto{b} -1]}_{\text{exponent slices}}
 \cup [\bto{b} ,\mathit{hi}]
$$
An *exponent slice* interval $[\bto{k},\bto{k+1}-1]$ is represented by the
regexp $[1-255]\bullet^k$. This leaves the endpoint intervals
$[\mathit{lo}, \bto{a + 1} -1]$ and $[\bto{b} ,\mathit{hi}]$, each with
a uniform exponent, which are dealt with by the next case.

2. $a = b, p < q$. The span between factors can also lead to splits:
$$
[p\bto{a} + r_1,(p + 1)\bto{a} -1 ] \cup\
 \underbrace{[(p + 1)\bto{a},q\bto{a} -1]}_{\text{factor slice}} \cup\ 
[q \bto{a} ,q \bto{a} + r_2]
$$
The *factor slice* interval $[(p+1) \bto{k},q\bto{k}-1]$ is only
defined when $p+1 < q$ and is represented by the charset
$[(p+1)-(q-1)]$ followed by $k$ dots:
$$
[(p+1)-(q-1)]\bullet^k .
$$
This leaves the endpoint intervals $[p\bto{a} + r_1,(p + 1)\bto{a} -1
]$ and $[q \bto{a} ,q \bto{a} + r_2]$, each with a uniform factor,
which takes us to the next case.

3. $a = b, p = q, r_1 \leq r_2$. In this case, the algorithm recurses on $[r_1,r_2]$, yielding
regexps $s_1, \ldots , s_k$, and we return $[p]s_1 + \cdots + [p]s_k$.

4. The recursion bottoms out when $\mathit{lo}$ and $\mathit{hi}$ are
less than 256, in which case the charset regexp $[\mathit{lo}-\mathit{hi}]$ is
returned.

**Integer Intervals.** Translation of integer intervals is accomplished
  by reduction to natural number intervals, based on the following case split 
  (number of bytes is $w$):

1. $0 \leq \mathit{lo} \leq \mathit{hi}$. No translation needed; the
interval is $\konst{regexp\_of}\;[\mathit{lo},\mathit{hi}]$.

2. $\mathit{lo} < 0 \leq \mathit{hi}$. A disjunction is made around 0.
$$
\konst{regexp\_of}\;[\mathit{lo},\mathit{hi}] =
\konst{regexp\_of}\;[2^{8w} + \mathit{lo}, 2^{8w} - 1] + \konst{regexp\_of}\;[0, \mathit{hi}]
$$
There is a special case here, where $\mathit{lo} = -2^{8w-1}$ and
$\mathit{hi} = 2^{8w-1} - 1$, in which case 
$\konst{regexp\_of}\;[\mathit{lo},\mathit{hi}] = \bullet^{w}$. 

3. $\mathit{lo} \leq \mathit{hi} < 0$. Both numbers are negative; we generate the interval from their
   twos complements.
$$
\konst{regexp\_of}\;[\mathit{lo},\mathit{hi}] =
\konst{regexp\_of}\;[2^{8w} + \mathit{lo}, 2^{8w} + \mathit{hi}]
$$

### Examples

In the following the implementation prints regexps out in a format
similar to the one used in this document. A charset may be expressed
as a sequence of ranges $[(m_1 - n_1), ... , (m_k - n_k)]$, where $m$
and $n$ are written as decimal ASCII codes or as printable
characters. Also, disjunction is expressed with $(- \mid -)$. The
following are in MSB format.

The interval $[-90,90]$ generates the regexp 

       [\166-\255] | [\000-Z]

This disjunction is on single charsets, so can be replaced by (and is, in the translation to DFA):

       [\000-Z\166-\255]
    
The interval $[-180,180]$ is recognized by the regexp

       [\255][L-\255] | [\000][\000-\180]

The interval $[0,14000]$ maps to

       [\000]. | [\001-5]. | [6][\000-\176]

A 5-state DFA is generated. The interval $[-2^{63}, 2^{63}-1]$ maps to

       ........

A 10-state machine is generated. The interval $[123456789,9876543210]$ generates the regexp:

       [\000][\007][[][\205][\021-\255] |
       [\000][\007][[][\206-\255]. |
       [\000][\007][\-\255].. |
       [\000][\008-\255]... |
       [\001].... |
       [\002][\000]... |
       [\002][\001-K]... |
       [\002][L][\000].. |
       [\002][L][\001-\175].. |
       [\002][L][\176][\000]. |
       [\002][L][\176][\001-\021]. |
       [\002][L][\176][\022][\000-\234]

which translates to a DFA with 15 states.

Record properties
------------------

Given record type
$$
   \konst{recd} = \{ f_1 : \tau_1; \ldots ; f_n : \tau_n\}
$$
and property $P : \konst{recd} \to \konst{bool}$ defined with field properties $P_1, \ldots, P_n$ by
$$
   P(r) \Leftrightarrow P_1(r.f_1) \land \ldots \land P_1(r.f_n),
$$
we can build $\konst{regexp\_of}(P)$ as the concatenation
$$
   \konst{regexp\_of}(P_1) \cdots \konst{regexp\_of}(P_n)
$$
In our examples so far, the field properties have been intervals.

A record message package
========================

The modelling of record properties via regexps, as just outlined,
gives us a useful level of abstraction for a package that takes high
level specifications of records and generates encoder/decoder/filter
implementations plus associated correctness proofs.

In particular, given a declaration of record type $\konst{recd}$ plus a predicate $P :
\konst{recd} \to \konst{bool}$ over the fields of the record, we
generate the following artifacts:

- a regexp $\mathcal{R} = \konst{regexp\_of}\;P$
- an encoding function $\konst{encode} : \konst{recd} \to \mathbb{S}$
- a decoding function $\konst{decode} : \mathbb{S} \to \konst{recd}\;\konst{option}$
- an inversion theorem showing that decoding inverts encoding for wellformed records

   $~~~~~~~~~~~~~~~~~\vdash \forall r:\konst{recd}.\; P(r) \imp \konst{decode}(\konst{encode}\; r) = \konst{SOME}\;r$

- a correctness theorem showing that encodings of well-formed records are exactly in the language of $\mathcal{R}$.

   $~~~~~~~~~~~~~~~~~\vdash \forall r:\konst{recd}.\; P(r) \Leftrightarrow \konst{encode}(r) \in \Lang{\mathcal{R}}$

- a deterministic finite state automaton (DFA) $M$ with the property that

   $~~~~~~~~~~~~~~~~~\vdash \forall s:\mathbb{S}.\; s \in \Lang{\mathcal{R}} \Leftrightarrow \konst{exec}(M,s) = \konst{true}$

- a theorem stating that DFA $M$ enforces property $P$:

   $~~~~~~~~~~~~~~~~~\vdash \forall r:\konst{recd}.\; P(r) \Leftrightarrow \konst{exec}(M,\konst{encode}(r)) = \konst{true}$

- CakeML programs and proofs (Johannes)

 In summary, given the record type and a wellformedness predicate, the
package produces implementations for an encoder and decoder, a DFA
that checks wellformedness of encoded records, along with correctness
proofs.

Property discussion
--------------------

A variety of theorems can be proved in this setting, and it is worth
discussing how they can be applied. For example, invertibility of encoding

 $~~~~~~~~~~~~~~~~~\vdash \forall r:\konst{recd}.\; P(r) \imp \konst{decode}(\konst{encode}\; r) = \konst{SOME}\;r$

is dependent on the well-formedness of the record. What happens when
the record is not well-formed? Proving the "iff" form of this might be
better.  Similarly, one might want the property that successfully
decoding a string into a record implies that the record is
well-formed. One version of this is

 $~~~~~~~~~~~~~~~~~\konst{decode}(s) = \konst{SOME}\;r \imp P(r)$

Another version:

 $~~~~~~~~~~~~~~~~~\konst{decode}(s) = \konst{SOME}\;r \imp s \in \Lang{\konst{regexp\_of}\;P}$

Both of these fail to exclude an incorrect encoder that (say) maps all
records into one (well-formed) value. To forbid that, one could demand
that the encoder is injective:

 $~~~~~~~~~~~~~~~~~\forall \mathit{recd}_1\; \mathit{recd}_2.\; \konst{encode}(\mathit{recd}_1) = \konst{encode}(\mathit{recd}_2) \imp \mathit{recd}_1 = \mathit{recd}_2$

Regarding applicability, another consideration is that, typically,
encoders and decoders are written by different people at different
times and places, trying to conform to a standard. Thus statements
about a generated encoding/decoding pair are of limited utility, so
separate properties about the encoder and decoder are valuable, whence
the importance of the well-formedness specification.

Proofs and Automation
=====================

Packed Record Formats
=====================

Dependent Records
=================

Lexing
=======

Related Work
=============

Buechi, Mona, Narcissus, D'Antoni, Slind and Hurd
(encoding/decoding). Sail, PADS, message format specification
languages. G. Rosu and generation of runtime monitors from regexps (any property proofs there?)

Note: unlike, say, Narcissus, we do not focus solely on encoding and
decoding. We add verified compilation, and proof of well-formedness
with respect to arithmetic specifications.

The details about encoding higher data in regexps are probably not
novel, given the huge amount of work expended on transition system
encodings for model-checking and in applying BDD and SAT
algorithms. However, I haven't yet come across any literature focusing
on intervals.

Check BDD encodings of numbers, etc.
