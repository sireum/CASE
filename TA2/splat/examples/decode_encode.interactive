app load ["AADL"];

open Lib Feedback HolKernel boolLib MiscLib regexpLib AADL splatTheory;

val int_ss = intLib.int_ss;

val qpat_k_assum = Lib.C qpat_x_assum kall_tac;
fun qspec q th = th |> Q.SPEC q 
fun qspec_arith q th = qspec q th |> SIMP_RULE arith_ss [];
val var_eq_tac = rpt BasicProvers.VAR_EQ_TAC;
val decide = bossLib.DECIDE;
val qdecide = decide o Parse.Term;

val justifyDefault = regexpLib.SML;

val ERR = Feedback.mk_HOL_ERR "splat";

val jsonfile = "examples/SW_v2.json";

val ([jpkg],ss) = Json.fromFile jsonfile
val (pkgName,enums,recds,fns,filters) = AADL.get_pkg_decls jpkg

(* OPEN AADL and go through gen_hol *)

val [filter_goal as (fname,regexp_tm,encode_def, decode_def, goal_tm)] = filter_goals;

val [good_coordinate_def, good_map_def, good_pattern_def, good_HMAC_def, 
     good_command_def, good_mission_def, good_mission_window_def] = fn_defs

val FlightPattern_bound = Q.store_thm
("FlightPattern_bound",
`!p. num_of_FlightPattern p < 256`,
 Cases >> rw_tac arith_ss [fetch "-" "num_of_FlightPattern_def"]);

val [enci_byte_1,enci_byte_2,enci_byte_3] = CONJUNCTS enci_bytes;

val decode_encode = Q.store_thm
("decode_encode",
 `!r. good_command r ==> (decode (encode_Command r) = SOME r)`,
 rw_tac list_ss [decode_def, encode_def,good_command_def,
                 good_map_def,good_coordinate_def]
  >> `(?a.     enci 1 r.Map.wp1.latitude  = [a])   /\
      (?b c.   enci 2 r.Map.wp1.longitude = [b;c]) /\
      (?d e.   enci 2 r.Map.wp1.altitude  = [d;e]) /\
      (?a1.    enci 1 r.Map.wp2.latitude  = [a1])  /\
      (?b1 c1. enci 2 r.Map.wp2.longitude = [b1;c1]) /\
      (?d1 e1. enci 2 r.Map.wp2.altitude  = [d1;e1]) /\
      (?a2.    enci 1 r.Map.wp3.latitude  = [a2])    /\
      (?b2 c2. enci 2 r.Map.wp3.longitude = [b2;c2]) /\
      (?d2 e2. enci 2 r.Map.wp3.altitude  = [d2;e2]) /\
      (?a3.    enci 1 r.Map.wp4.latitude  = [a3])    /\
      (?b3 c3. enci 2 r.Map.wp4.longitude = [b3;c3]) /\
      (?d3 e3. enci 2 r.Map.wp4.altitude  = [d3;e3]) /\
      (?f.     enc_FlightPattern r.Pattern = [f]) /\
      (?g.     enc_bool r.HMAC = [g])`
      by (rpt conj_tac 
            >> ((FIRST [match_mp_tac enci_byte_1, match_mp_tac enci_byte_2]
                >> rw_tac int_ss [] >> intLib.ARITH_TAC)
                ORELSE
		(rw_tac std_ss [fetch "-" "enc_FlightPattern_def",
                                splatTheory.enc_bool_def] 
                 >> metis_tac [FlightPattern_bound,bool_bound,enc_bytes])))
  >> rw_tac list_ss [fetch "-" "Command_component_equality",
                     fetch "-" "Map_component_equality",
                     fetch "-" "Coordinate_component_equality"]
  >> rpt (qpat_x_assum `_ = _` (SUBST_ALL_TAC o SYM))
  >> FIRST [match_mp_tac deci_enci_1,match_mp_tac deci_enci_2,
            metis_tac [dec_enc_fp,bool_dec_enc]]
  >> intLib.ARITH_TAC
);
