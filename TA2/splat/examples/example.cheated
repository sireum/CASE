val cheat_thm = Q.prove
(`!m. (m.degrees ≤ 90 <=> (enc 1 m.degrees) IN regexp_lang (Chset (Charset 0xFFFFFFFFFFFFFFFFw 0x7FFFFFFw 0w 0w))) /\
      (m.minutes ≤ 59 <=> (enc 1 m.minutes) IN regexp_lang (Chset (Charset 0xFFFFFFFFFFFFFFFw 0w 0w 0w))) /\
      (m.seconds ≤ 5999 <=> 
        (enc 2 m.seconds) 
          IN (regexp_lang
               (Chset (Charset 0xFFFFFFFFFFFFFFFFw 0xFFFFFFFFFFFFFFFFw 0xFFFFFFFFFFFFFFFFw 0xFFFFFFFFFFFFFFFFw)) dot regexp_lang (Chset (Charset 0x7FFFFFw 0w 0w 0w)))
             UNION
             (regexp_lang (Chset (Charset 0xFFFFFFFFFFFFFFFFw 0xFFFFFFFFFFFFw 0w 0w)) dot regexp_lang (Chset (Charset 0x800000w 0w 0w 0w))))
   ==>
 (m.degrees <= 90 /\ m.minutes <= 59 /\ m.seconds <= 5999 <=>
   STRCAT (STRCAT (enc 1 m.degrees) (enc 1 m.minutes)) (enc 2 m.seconds) IN
   regexp_lang (Chset (Charset 0xFFFFFFFFFFFFFFFFw 0x7FFFFFFw 0w 0w))
   dot
    regexp_lang (Chset (Charset 0xFFFFFFFFFFFFFFFw 0w 0w 0w)) 
   dot
   ((regexp_lang
      (Chset (Charset 0xFFFFFFFFFFFFFFFFw 0xFFFFFFFFFFFFFFFFw 0xFFFFFFFFFFFFFFFFw 0xFFFFFFFFFFFFFFFFw)) dot regexp_lang (Chset (Charset 0x7FFFFFw 0w 0w 0w))) UNION
    (regexp_lang (Chset (Charset 0xFFFFFFFFFFFFFFFFw 0xFFFFFFFFFFFFw 0w 0w)) dot regexp_lang (Chset (Charset 0x800000w 0w 0w 0w)))))`,
rpt (strip_tac ORELSE EQ_TAC)
>- (full_simp_tac list_ss [regexp_lang_cat, regexp_lang_or,LIST_UNION_def]
    >> rw_tac bool_ss [Once (GSYM STRCAT_ASSOC)]
    >> rpt (match_mp_tac STRCAT_IN_dot ORELSE conj_tac)
    >> metis_tac [pred_setTheory.IN_UNION])
>- (qpat_x_assum `m.minutes <= 59 <=> _` kall_tac
    >> qpat_x_assum `m.seconds <= 5999 <=> _` kall_tac
    >> rw_tac list_ss []
    >> `1 <= LENGTH (enc 1 m.degrees) /\ 
        1 <= LENGTH (enc 1 m.minutes) /\
        2 <= LENGTH (enc 2 m.seconds)` by metis_tac [lower_enc_1,lower_enc_2]
    >> drule (Q.ISPECL [`enc 1 m.degrees`, `enc 1 m.minutes`, `enc 2 m.seconds`] list_len_lem)
    >> rw_tac list_ss []
    >> full_simp_tac list_ss []
         >> `m.degrees <= 90` by metis_tac [dec_enc]
         >> `m.minutes <= 59` by metis_tac [dec_enc,good_dms_def]
	 >> (`m.seconds = dec (STRING h'' (STRING h''' ""))` by metis_tac [dec_enc]
	     >> rw_tac list_ss []
             >> full_simp_tac list_ss [dec_def, l2n_def,ord_lem,good_dms_def]))
>-
>-

val AGREE_PROP = Q.prove
(`!m:dms. good_dms m <=> enc_dms(m) IN regexp_lang ^dms_regexp_term`,
rw_tac (list_ss ++ pred_setLib.PRED_SET_ss) 
   [good_dms_def, enc_dms_def,enc_degrees_def, enc_seconds_def, enc_minutes_def,
                 regexp_lang_cat, regexp_lang_or,LIST_UNION_def]
 >> match_mp_tac cheat_thm
 >> rw_tac list_ss 
         [regexp_lang_or,regexp_lang_cat,regexpTheory.LIST_UNION_def,IN_dot,
	  GSYM ilem1A,GSYM ilem2A,GSYM ilem3A,GSYM ilem4A,GSYM ilem5A,GSYM ilem6A,
          GSYM ilem3B,GSYM ilem3C,dec_enc]
 >- rw_tac list_ss [EQ_IMP_THM,enc_1_lem]
 >- rw_tac list_ss [EQ_IMP_THM,enc_1_lem]
 >- (simp_tac bool_ss 
               [decide ``secs <= 5999n <=> 
                        secs < 23 * 256 \/ 
                        23 * 256 <= secs /\ secs <= 23 * 256 + 111``]
     >> rw_tac arith_ss [EQ_IMP_THM]
        >- (disj1_tac 
            >> qexists_tac`enc 1 (m.seconds MOD 256)`
            >> qexists_tac`enc 1 ((m.seconds DIV 256) MOD 256)`
            >> rw_tac list_ss [dec_enc, enc_2_lem,enc_1_lem]
	    >> rw_tac arith_ss [DIV_MOD_MOD_DIV,DIV_LT_X])
        >- (disj2_tac 
            >> qexists_tac`enc 1 (m.seconds MOD 256)`
            >> qexists_tac`enc 1 ((m.seconds DIV 256) MOD 256)`
            >> rw_tac list_ss [dec_enc, enc_2_lem,enc_1_lem]
	    >> rw_tac arith_ss [DIV_MOD_MOD_DIV,DIV_LT_X, DIV_EQ_X]
            >> drule (qspec_arith `256` interval_mod_lem 
                      |> qspec_arith `23` |> qspec_arith `111`)
            >> decide_tac)
        >- (disj1_tac
	     >> Cases_on `u` >> Cases_on `v` >> full_simp_tac list_ss []
             >> var_eq_tac
	     >> `m.seconds = dec (STRING h (STRING h' ""))` by metis_tac [dec_enc]
	     >> full_simp_tac list_ss [dec_def,l2n_def, ord_lem])
        >- (disj2_tac
	     >> Cases_on `u` >> Cases_on `v` >> full_simp_tac list_ss []
             >> var_eq_tac
	     >> `m.seconds = dec (STRING h (STRING h' ""))` by metis_tac [dec_enc]
	     >> full_simp_tac list_ss [dec_def,l2n_def, ord_lem])
   )
);
