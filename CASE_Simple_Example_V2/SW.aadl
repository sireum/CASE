package SW
public
	with UAV;

	with Data_Model;

	with Base_Types;

	with CASE_Properties;

	with CASE_Model_Transformations;
	renames CASE_Model_Transformations::all;

	data Coordinate
	end Coordinate;

	data implementation Coordinate.Impl
		-- This is the structure to hold the lat/long/alt values of a coordinate
		subcomponents
			latitude: data Base_Types::Integer;
			longitude: data Base_Types::Integer;
			altitude: data Base_Types::Integer;
	end Coordinate.Impl;

	data Map
	end Map;

	data implementation Map.Impl
		-- The Map is a structure that contains a list of coordinates that encircle a
		-- region.  
		-- In this implementation, we fix the size of the map to 4 waypoints
		-- Future versions will use an array
		subcomponents
			wp1: data Coordinate.Impl;
			wp2: data Coordinate.Impl;
			wp3: data Coordinate.Impl;
			wp4: data Coordinate.Impl;
	end Map.Impl;

	data MapArray
	end MapArray;

	data implementation MapArray.Impl
		-- The MapArray is a structure that hold multiple Maps
		-- In this implementation, we fix the size of the map array to 5 maps
		-- Future versions will use an array
		subcomponents
			map1: data Map.Impl;
			map2: data Map.Impl;
			map3: data Map.Impl;
			map4: data Map.Impl;
			map5: data Map.Impl;
	end MapArray.Impl;

	data FlightPattern
		-- The Flight Pattern is an enumeration that defines how the UAV will fly through the
		-- sensing region to conduct surveillance.
		properties
			Data_Model::Data_Representation => Enum;
			Data_Model::Enumerators => ("ZigZag", "StraightLine", "Perimeter");
	end FlightPattern;

	data implementation FlightPattern.Impl
	end FlightPattern.Impl;

	data Command
	end Command;

	data implementation Command.Impl
		-- The Command structure contains data that the Ground Station passes to the UAV.
		-- It contains a message header, Map and Flight Pattern.
		subcomponents
			map: data Map.Impl;
			pattern: data FlightPattern;
	end Command.Impl;
	
	data RF_Msg extends CASE_Model_Transformations::CASE_RF_Msg
	end RF_Msg;
	
	data implementation RF_Msg.Impl extends CASE_Model_Transformations::CASE_RF_Msg.Impl
		subcomponents
			payload: refined to data Command.Impl;
	end RF_Msg.Impl;

	data Mission
	end Mission;

	data implementation Mission.Impl
		-- The Mission is a list of waypoints that is generated by the Flight Planner based on a
		-- Map and Flight Pattern.
		-- For this implementation, we fix the size of the Mission to 10 waypoints.
		-- Future versions will use an array
		subcomponents
			wp1: data Coordinate.Impl;
			wp2: data Coordinate.Impl;
			wp3: data Coordinate.Impl;
			wp4: data Coordinate.Impl;
			wp5: data Coordinate.Impl;
			wp6: data Coordinate.Impl;
			wp7: data Coordinate.Impl;
			wp8: data Coordinate.Impl;
			wp9: data Coordinate.Impl;
			wp10: data Coordinate.Impl;
	end Mission.Impl;

	data MissionWindow
	end MissionWindow;

	data implementation MissionWindow.Impl
		-- The Mission Window is a list of waypoints that the Waypoint Manager assembles from the Mission.
		-- For this implementation, we fix the size of the Mission Window to 4 waypoints.
		subcomponents
			wp1: data Coordinate.Impl;
			wp2: data Coordinate.Impl;
			wp3: data Coordinate.Impl;
			wp4: data Coordinate.Impl;
	end MissionWindow.Impl;

	thread WifiDriver
		-- The WifiDriver is the software that enables other SW components to communicate to other systems over WiFi
		features
			gimbal_command: in event data port;
			send_data: out event data port UAV::WIFI_Msg.Impl;
			recv_data: in event data port UAV::WIFI_Msg.Impl;
	end WifiDriver;

	thread implementation WifiDriver.Impl
	end WifiDriver.Impl;

	thread RadioDriver
		-- The RadioDriver is the software that enables other SW components to communicate to other systems over RF
		features
			recv_data: in event data port CASE_Model_Transformations::CASE_RF_Msg.Impl;
			send_data: out event data port CASE_Model_Transformations::CASE_RF_Msg.Impl;
			mission_command: out event data port RF_Msg.Impl;
			status: in event data port Coordinate.Impl;
		properties
			CASE_Properties::COMP_TYPE => COMM_DRIVER;
		annex agree {**			
			guarantee Req001_RadioDriver_E "Only valid command messages shall be forwarded to message destination components" :
					event(mission_command) => VALID_MESSAGE(mission_command.header);
					
		**};
	end RadioDriver;

	thread implementation RadioDriver.Impl

	end RadioDriver.Impl;


	thread FlightPlanner
		-- The FlightPlanner is an abstraction for UxAS.
		-- It accepts a command message containing a map and flight pattern, and generates a mission.
		-- The FlightPlanner also has access to a No-Fly zone database, which it uses to generate the mission 
		-- to avoid specified no-fly zones
		features
			flight_plan: out data port Mission.Impl;
			recv_map: in event data port RF_Msg.Impl;
			request_nofly_zones: out event data port Map.Impl;
			nofly_zones: in event data port MapArray.Impl;
			position_status: in event data port Coordinate.Impl;
		annex agree {**
			assume Req001_FlightPlanner_E "The Flight Planner shall receive a valid message from the Ground Station" : event(recv_map) => VALID_MESSAGE(recv_map.header);
			guarantee Req004_FlightPlanner_E "The Flight Planner shall generate a valid mission" : good_mission(flight_plan);
		**};

	end FlightPlanner;

	thread implementation FlightPlanner.Impl
	end FlightPlanner.Impl;

	thread NoFlyZoneDatabase
		-- The NoFlyZoneDatabase is a collection of polygons that represent areas on a map which the UAV should avoid.
		-- The database is populated at build-time and stored in memory.
		-- When provided a map of a region, it will return all no-fly areas within that region.
		features
			map: in event data port Map.Impl;
			zones: out event data port MapArray.Impl;
	end NoFlyZoneDatabase;

	thread implementation NoFlyZoneDatabase.Impl
	end NoFlyZoneDatabase.Impl;

	thread WaypointManager
		-- The WaypointManager divides a mission into a small window of waypoints suitable for the FlightController.
		-- Because the FlightController can only process a small number of waypoints at a time, the WaypointManager
		-- creates these mission windows in response to the current position of the UAV, provided by the FlightController GPS.
		features
			flight_plan: in data port Mission.Impl;
			mission_window: out event data port MissionWindow.Impl;
			position_status: in event data port Coordinate.Impl;
		annex agree {**
			assume Req001_WaypointManager "The Waypoint Manager shall receive a well-formed mission" : good_mission(flight_plan);
			guarantee Req002_WaypointManager "The Waypoint Manager shall output a well-formed mission window" : good_mission_window(mission_window);
		**};
	end WaypointManager;

	thread implementation WaypointManager.Impl
	end WaypointManager.Impl;

	thread CameraManager
		-- The CameraManager determines the gimbal settings for the onboard camera based on the current position of the UAV and the mission.
		-- The CameraManager then sends out gimbal commands to the camera over the wifi connection
		features
			flight_plan: in data port Mission.Impl;
			position_status: in event data port Coordinate.Impl;
			gimbal_command: out event data port;
	end CameraManager;

	thread implementation CameraManager.Impl
	end CameraManager.Impl;

	thread UARTDriver
		-- The UARTDriver is the software that enables other SW components to communicate to other systems over the serial connection
		features
			status: out event data port Coordinate.Impl;
			mission_window: in event data port MissionWindow.Impl;
			recv_data: in event data port UAV::UART_Msg.Impl;
			send_data: out event data port UAV::UART_Msg.Impl;
		annex agree {**
			assume Req001_UARTDriver "Well-formed mission window" : good_mission_window(mission_window);
			guarantee Req002_UARTDriver "A CRC shall be appended to the message to determine message correctness" : send_data.crc = true;
		**};
	end UARTDriver;

	thread implementation UARTDriver.Impl
	end UARTDriver.Impl;

	process SW
		-- The Mission Computer Software process runs all threads
		features
			radio_recv: in event data port CASE_Model_Transformations::CASE_RF_Msg.Impl;
			radio_send: out event data port CASE_Model_Transformations::CASE_RF_Msg.Impl;
			uart_recv: in event data port UAV::UART_Msg.Impl;
			uart_send: out event data port UAV::UART_Msg.Impl;
			wifi_recv: in event data port UAV::WIFI_Msg.Impl;
			wifi_send: out event data port UAV::WIFI_Msg.Impl;
		annex agree {**
			guarantee Req002_SW "The Mission Computer shall output a valid mission window to the Flight Controller" : uart_send.crc = True;
		**};
	end SW;


	process implementation SW.Impl
		subcomponents
			RADIO: thread RadioDriver.Impl;
			FPLN: thread FlightPlanner.Impl;
			WPM: thread WaypointManager.Impl;
			CM: thread CameraManager.Impl;
			UART: thread UARTDriver.Impl;
			WIFI: thread WifiDriver.Impl;
			NFDB: thread NoFlyZoneDatabase.Impl;
		connections
			c1: port radio_recv -> RADIO.recv_data;
			c2: port RADIO.send_data -> radio_send;
			c3: port RADIO.mission_command -> FPLN.recv_map;
			c5: port FPLN.flight_plan -> WPM.flight_plan;
			c6: port FPLN.request_nofly_zones -> NFDB.map;
			c7: port NFDB.zones -> FPLN.nofly_zones;
			c8: port WPM.mission_window -> UART.mission_window;
			c9: port UART.status -> WPM.position_status;
			c10: port UART.status -> FPLN.position_status;
			c11: port UART.status -> RADIO.status;
			c12: port UART.send_data -> uart_send;
			c13: port uart_recv -> UART.recv_data;
			c14: port FPLN.flight_plan -> CM.flight_plan;
			c15: port UART.status -> CM.position_status;
			c16: port CM.gimbal_command -> WIFI.gimbal_command;
			c17: port WIFI.send_data -> wifi_send;
			c18: port wifi_recv -> WIFI.recv_data;
	end SW.Impl;

	annex agree {**
			
		-- ID of this UAV
		const CASE_UAV_ID : int = 42;
		
		fun VALID_MESSAGE(header : CASE_Model_Transformations::CASE_MsgHeader.Impl) : bool = (header.src > 0 and header.dst = CASE_UAV_ID and not (header.msg_type = CASE_Model_Transformations::NULL_MSG_TYPE) and header.HMAC = true);
		
		fun TRUSTED_MESSAGE(header : CASE_Model_Transformations::CASE_MsgHeader.Impl) : bool = CASE_Model_Transformations::TRUSTED(header.src);

		fun WELL_FORMED_MESSAGE(msg : Command.Impl) : bool = good_command(msg);
		
			
		-- These functions check the well-formedness of message structures
		fun good_coordinate(coord : Coordinate.Impl) : bool =	coord.latitude >= -90 and 
																	coord.latitude <= 90 and 
																	coord.longitude >= -180 and 
																	coord.longitude <= 180 and 
																	coord.altitude >= 0 and 
																	coord.altitude <= 15000;
																	
		fun good_map(map : Map.Impl) : bool =	good_coordinate(map.wp1) and 
													good_coordinate(map.wp2) and 
													good_coordinate(map.wp3) and 
													good_coordinate(map.wp4);
													
		fun good_pattern(pattern : FlightPattern.Impl) : bool =	(pattern = enum(FlightPattern, ZigZag)) or 
																(pattern = enum(FlightPattern, StraightLine)) or 
																(pattern = enum(FlightPattern, Perimeter));
		
		fun good_command(cmd : Command.Impl) : bool = good_map(cmd.map) and good_pattern(cmd.pattern);
																
		fun good_mission(mission : Mission.Impl) : bool =	good_coordinate(mission.wp1) and 
																good_coordinate(mission.wp2) and 
																good_coordinate(mission.wp3) and 
																good_coordinate(mission.wp4) and 
																good_coordinate(mission.wp5) and 
																good_coordinate(mission.wp6) and 
																good_coordinate(mission.wp7) and 
																good_coordinate(mission.wp8) and 
																good_coordinate(mission.wp9) and 
																good_coordinate(mission.wp10);	
																
		fun good_mission_window(win : MissionWindow.Impl) : bool =	good_coordinate(win.wp1) and 
																		good_coordinate(win.wp2) and 
																		good_coordinate(win.wp3) and 
																		good_coordinate(win.wp4);
	**};
end SW;